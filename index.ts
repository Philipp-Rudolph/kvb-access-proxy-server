import { serve } from "bun";
import iconv from "iconv-lite";
import { mkdir, writeFile, readFile, access } from "fs/promises";
import { join } from "path";

const API_BASE_URL = "https://data.webservice-kvb.koeln/service/opendata/";
const CACHE_DIR = "./cache";
const CACHE_TTL = 3600000; // Cache-G√ºltigkeit: 1 Stunde in Millisekunden
const PORT = 3001;

// In-Memory-Cache
const memoryCache = new Map();

// Cache-Verzeichnis erstellen (falls nicht vorhanden)
async function ensureCacheDir() {
  try {
    await access(CACHE_DIR);
  } catch (err) {
    // Verzeichnis existiert nicht, also erstellen
    await mkdir(CACHE_DIR, { recursive: true });
    console.log(`üìÅ Cache-Verzeichnis erstellt: ${CACHE_DIR}`);
  }
}

// Cache-Schl√ºssel aus URL generieren
function getCacheKey(url: string) {
  return url.replace(/[^a-z0-9]/gi, '_').toLowerCase();
}

// Cache-Datei f√ºr URL erstellen
function getCacheFilePath(cacheKey: string) {
  return join(CACHE_DIR, `${cacheKey}.json`);
}

// Daten im Cache speichern (Memory + Datei)
async function cacheResponse(url: string, data: string, headers: object) {
  const cacheKey = getCacheKey(url);
  const cacheFilePath = getCacheFilePath(cacheKey);
  
  // Cache-Objekt
  const cacheEntry = {
    data,
    headers,
    timestamp: Date.now()
  };
  
  // In-Memory-Cache aktualisieren
  memoryCache.set(cacheKey, cacheEntry);
  
  // In Datei speichern
  try {
    await ensureCacheDir();
    await writeFile(cacheFilePath, JSON.stringify(cacheEntry), 'utf8');
    console.log(`üíæ Cache gespeichert f√ºr: ${url}`);
  } catch (err: any) {
    console.error(`‚ùå Fehler beim Speichern des Cache: ${err.message}`);
  }
}

// Daten aus dem Cache lesen (zuerst Memory, dann Datei)
async function getCachedResponse(url: string) {
  const cacheKey = getCacheKey(url);
  
  // Zuerst im Memory-Cache suchen
  if (memoryCache.has(cacheKey)) {
    const cache = memoryCache.get(cacheKey);
    
    // √úberpr√ºfen, ob der Cache noch g√ºltig ist
    if (Date.now() - cache.timestamp < CACHE_TTL) {
      console.log(`üîÑ G√ºltige Daten im Memory-Cache gefunden f√ºr: ${url}`);
      return cache;
    } else {
      // Cache ist abgelaufen, aus Memory entfernen
      memoryCache.delete(cacheKey);
    }
  }
  
  // Falls nicht im Memory oder abgelaufen, in der Datei nachsehen
  const cacheFilePath = getCacheFilePath(cacheKey);
  try {
    const fileData = await readFile(cacheFilePath, 'utf8');
    const cache = JSON.parse(fileData);
    
    // √úberpr√ºfen, ob der Datei-Cache noch g√ºltig ist
    if (Date.now() - cache.timestamp < CACHE_TTL) {
      console.log(`üìÇ G√ºltige Daten im Datei-Cache gefunden f√ºr: ${url}`);
      // In den Memory-Cache laden f√ºr schnelleren Zugriff in Zukunft
      memoryCache.set(cacheKey, cache);
      return cache;
    }
  } catch (err) {
    // Datei existiert nicht oder kann nicht gelesen werden
    console.log(`üì≠ Kein Cache gefunden f√ºr: ${url}`);
  }
  
  // Kein g√ºltiger Cache gefunden
  return null;
}

// Helfer-Funktion f√ºr die Textkodierung
function getBestEncoding(buffer: Buffer) {
  // Versuche direkt als UTF-8 zu dekodieren (keine Konvertierung)
  const textUTF8 = buffer.toString();
  
  // √úberpr√ºfe UTF-8 auf g√ºltige Umlaute (Stichprobe)
  const hasValidUmlauts = textUTF8.includes('√§') || textUTF8.includes('√∂') ||
    textUTF8.includes('√º') || textUTF8.includes('√ü');
  
  // Falls UTF-8 g√ºltig erscheint, verwende es direkt
  if (hasValidUmlauts) {
    console.log("üî§ Verwende direkt UTF-8 (keine Konvertierung)");
    return { text: textUTF8, encoding: "utf-8" };
  }
  
  // Wenn UTF-8 nicht g√ºltig ist, probiere andere Kodierungen
  // G√§ngige Kodierungen f√ºr deutsche Texte
  const encodings = ["iso-8859-1", "iso-8859-15", "windows-1252"];
  
  for (const encoding of encodings) {
    const convertedText = iconv.decode(buffer, encoding);
    const hasUmlauts = convertedText.includes('√§') || convertedText.includes('√∂') ||
      convertedText.includes('√º') || convertedText.includes('√ü');
    
    console.log(`üî§ Test ${encoding}: Umlaute gefunden: ${hasUmlauts}`);
    
    if (hasUmlauts) {
      return { text: convertedText, encoding };
    }
  }
  
  // Fallback, wenn keine passende Kodierung gefunden wurde
  return { text: textUTF8, encoding: "utf-8" };
}

// Server starten
await ensureCacheDir();

serve({
  port: PORT,
  async fetch(req) {
    const url = new URL(req.url);
    
    if (!url.pathname.startsWith("/api")) {
      return new Response("‚ùå Not Found", { status: 404 });
    }
    
    const targetUrl = API_BASE_URL + url.pathname.replace("/api", "");
    console.log(`üîó Proxy-Anfrage an: ${targetUrl}`);
    
    try {
      // Versuche zuerst einen Cache-Hit zu bekommen
      const cachedResponse = await getCachedResponse(targetUrl);
      
      if (cachedResponse) {
        console.log(`‚úÖ Cache-Hit f√ºr: ${targetUrl}`);
        return new Response(cachedResponse.data, {
          headers: {
            ...cachedResponse.headers,
            "X-Cache": "HIT",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS"
          }
        });
      }
      
      // Wenn kein Cache, dann Live-Anfrage stellen
      console.log(`üåê Live-Anfrage an: ${targetUrl}`);
      const response = await fetch(targetUrl);
      const contentType = response.headers.get("Content-Type") || "text/plain";
      console.log(`üìú Content-Type: ${contentType}`);
      
      // API-Daten als Bin√§rdaten abrufen
      const arrayBuffer = await response.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);
      
      // Beste Kodierung ermitteln und Text konvertieren
      const { text, encoding } = getBestEncoding(buffer);
      console.log(`üî§ Verwende Kodierung: ${encoding}`);
      
      // Response-Header vorbereiten
      const responseHeaders = {
        "Content-Type": "application/json; charset=utf-8",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "X-Cache": "MISS",
        "X-Original-Encoding": encoding
      };
      
      // Antwort im Cache speichern
      await cacheResponse(targetUrl, text, responseHeaders);
      
      // Antwort senden
      return new Response(text, {
        status: response.status,
        headers: responseHeaders
      });
    } catch (err: any) {
      console.error(`‚ùå Fehler beim Abrufen der API: ${err.message}`);
      
      // Im Fehlerfall: Versuche aus dem Cache zu bedienen, auch wenn abgelaufen
      try {
        const cacheKey = getCacheKey(targetUrl);
        const cacheFilePath = getCacheFilePath(cacheKey);
        const fileData = await readFile(cacheFilePath, 'utf8');
        const cache = JSON.parse(fileData);
        
        console.log(`üîÑ Verwende abgelaufenen Cache f√ºr: ${targetUrl}`);
        
        return new Response(cache.data, {
          headers: {
            ...cache.headers,
            "X-Cache": "STALE",
            "X-Cache-Age": `${Math.floor((Date.now() - cache.timestamp) / 1000)}s`,
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS"
          }
        });
      } catch (cacheErr: any) {
        // Wenn auch kein Cache verf√ºgbar ist, Fehler zur√ºckgeben
        console.error(`‚ùå Kein Cache verf√ºgbar: ${cacheErr.message}`);
        return new Response("Service nicht verf√ºgbar", { 
          status: 503,
          headers: {
            "Content-Type": "text/plain; charset=utf-8",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Retry-After": "300" // Nach 5 Minuten erneut versuchen
          }
        });
      }
    }
  },
});

console.log(`üöÄ Proxy mit Cache l√§uft auf http://localhost:${PORT}`);